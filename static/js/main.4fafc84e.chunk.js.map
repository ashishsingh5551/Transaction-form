{"version":3,"sources":["actions/transactionActions.js","components/TransactionForm.js","components/TransactionList.js","App.js","reportWebVitals.js","index.js","reducers/transactionReducer.js"],"names":["insert","data","type","payload","update","Delete","index","UpdateIndex","TransactionForm","state","returnStateObject","handleInputChange","e","setState","target","name","value","handleSubmit","preventDefault","props","currentIndex","insertTransaction","updateTransaction","this","bAccountNo","iFSC","bName","amount","list","prevProps","length","autoComplete","onSubmit","placeholder","onChange","Component","connect","dispatch","bindActionCreators","actions","TransactionList","returnList","onAddOrEdit","push","localStorage","setItem","JSON","stringify","handleEdit","updateTransactionIndex","handleDelete","deleteTransaction","getItem","parse","map","item","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fafc84e.chunk.js","sourcesContent":["export const insert = data => {\r\n    return {\r\n        type: 'INSERT',\r\n        payload: data\r\n    }\r\n}\r\n\r\n\r\nexport const update = data => {\r\n    return {\r\n        type: 'UPDATE',\r\n        payload: data\r\n    }\r\n}\r\nexport const Delete = index => {\r\n    return {\r\n        type: 'DELETE',\r\n        payload: index\r\n    }\r\n}\r\nexport const UpdateIndex = index => {\r\n    return {\r\n        type: 'UPDATE-INDEX',\r\n        payload: index\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/transactionActions';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nclass TransactionForm extends Component {\r\n    state = {\r\n        ...this.returnStateObject()\r\n    }\r\n\r\n    returnStateObject() {\r\n        if (this.props.currentIndex === -1)\r\n            return {\r\n                bAccountNo: '',\r\n                iFSC: '',\r\n                bName: '',\r\n                amount: ''\r\n            }\r\n        else\r\n            return this.props.list[this.props.currentIndex]\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.currentIndex !== this.props.currentIndex || prevProps.list.length !== this.props.list.length)\r\n            this.setState({ ...this.returnStateObject() })\r\n    }\r\n\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (this.props.currentIndex === -1)\r\n            this.props.insertTransaction(this.state)\r\n        else\r\n            this.props.updateTransaction(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit} >\r\n                <input name=\"bAccountNo\" placeholder=\"A/C No.\" value={this.state.bAccountNo} onChange={this.handleInputChange} /> <br />\r\n                <input name=\"iFSC\" placeholder=\"IFSC Code\" value={this.state.iFSC} onChange={this.handleInputChange} /> <br />\r\n                <input name=\"bName\" placeholder=\"A/C Holder Name\" value={this.state.bName} onChange={this.handleInputChange} /> <br />\r\n                <input name=\"amount\" placeholder=\"Amount\" value={this.state.amount} onChange={this.handleInputChange} /> <br />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        list: state.list,\r\n        currentIndex: state.currentIndex\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        insertTransaction: actions.insert,\r\n        updateTransaction: actions.update\r\n    }, dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionForm);","import React, { Component } from 'react';\r\nimport TransactionForm from './TransactionForm';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/transactionActions';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nclass TransactionList extends Component {\r\n    state = {\r\n        currentIndex: -1,\r\n        list: this.returnList()\r\n    }\r\n\r\n    returnList() {\r\n        if (localStorage.getItem('transactions') == null)\r\n            localStorage.setItem('transactions', JSON.stringify([]))\r\n        return JSON.parse(localStorage.getItem('transactions'))\r\n    }\r\n\r\n    onAddOrEdit = (data) => {\r\n        var list = this.returnList()\r\n        if (this.state.currentIndex === -1)\r\n            list.push(data)\r\n        else\r\n            list[this.state.currentIndex] = data\r\n        localStorage.setItem('transactions', JSON.stringify(list))\r\n        this.setState({ list, currentIndex: -1 })\r\n    }\r\n\r\n    handleEdit = index => {\r\n        this.props.updateTransactionIndex(index)\r\n    }\r\n\r\n    handleDelete = index => {\r\n        this.props.deleteTransaction(index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TransactionForm />\r\n                <hr />\r\n                <table>\r\n                    <tbody>\r\n                        {\r\n                            this.props.list.map((item, index) => {\r\n                                return <tr key={index}>\r\n                                    <td>{item.bAccountNo}</td>\r\n                                    <td>{item.bName}</td>\r\n                                    <td>{item.amount}</td>\r\n                                    <td><button onClick={() => this.handleEdit(index)}>Edit</button></td>\r\n                                    <td><button onClick={() => this.handleDelete(index)}>Delete</button></td>\r\n                                </tr>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        list: state.list\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        deleteTransaction: actions.Delete,\r\n        updateTransactionIndex: actions.UpdateIndex\r\n    }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList);","import React from 'react';\nimport './App.css';\nimport TransactionList from './components/TransactionList';\n\nfunction App() {\n  return (\n    <TransactionList></TransactionList>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { transactionReducer } from './reducers/transactionReducer';\n\n\nif (localStorage.getItem('transactions') == null)\n  localStorage.setItem('transactions', JSON.stringify([]))\nlet initialState = {\n  currentIndex: -1,\n  list: JSON.parse(localStorage.getItem('transactions'))\n}\n\nvar store = createStore(transactionReducer, initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n\n\n\n\n","export const transactionReducer = (state, action) => {\r\n    var list = JSON.parse(localStorage.getItem('transactions'))\r\n    switch (action.type) {\r\n\r\n        case \"INSERT\":\r\n            list.push(action.payload)\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n\r\n        case \"UPDATE\":\r\n            list[state.currentIndex] = action.payload\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n\r\n        case \"DELETE\":\r\n            list.splice(action.payload, 1)\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n\r\n        case \"UPDATE-INDEX\":\r\n            return { list, currentIndex: action.payload }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}